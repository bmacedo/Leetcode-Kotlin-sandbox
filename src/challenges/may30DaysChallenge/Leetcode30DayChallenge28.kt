package challenges.may30DaysChallenge


/**
 * Counting Bits
 *
 * Given a non negative integer number num.
 * For every numbers i in the range 0 ≤ i ≤ num calculate the number of 1's in their binary
 * representation and return them as an array.
 *
 * Example:
 *  Input: 5
 *  Output: [0,1,1,2,1,2]
 */
fun main(args: Array<String>) {
    val input = 2
    println(Leetcode30DayChallenge28.countBits(input).toList())
}

object Leetcode30DayChallenge28 {

    // O(n)
    // This algo is based in the fact that for every num
    // the next batch up until 2^k/2 repeats the number of 1's bits set
    // plus 2^k/2 repeats but +1.
    // So:
    //  between 0..3   I have [0,1,1,2]
    //  between 4..7   I have [1,2,2,3] /* which is [0,1,1,2] +1 in each element */
    //  between 8..11  I have [1,2,2,3] /* repeats the previous cycle */
    //  between 11..15 I have [2,3,3,4] /* which is [1,2,2,3] +1 in each element */
    fun countBits(num: Int): IntArray {
        val output = IntArray(num + 1)

        var currentNum = 0
        output[currentNum++] = 0

        if (num >= 1) output[currentNum++] = 1

        var k = 1
        while (currentNum <= num) {
            val repeatCount = 1 shl (k - 1)
            val n = currentNum
            for (i in (n - repeatCount) until n) {
                if (currentNum > num) break
                output[currentNum++] = output[i]
            }
            for (i in (n - repeatCount) until n) {
                if (currentNum > num) break
                output[currentNum++] = output[i] + 1
            }
            k++
        }
        return output
    }

    // O(n*sizeof(num))
    fun countBitsStr(num: Int): IntArray {
        val output = IntArray(num + 1)
        for (n in 0..num) {
            // using the stdlib str transformation makes things easier to read
            // but the fact that it needs to be transformed into a string and then
            // counting the str makes this method a little slower. Also, not O(n)
            // anymore, since it will depend on the size of the str generated by each number.
            val str = Integer.toBinaryString(n)
            output[n] = str.filter { it == '1' }.count()
        }
        return output
    }
}

